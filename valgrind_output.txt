==708867== Memcheck, a memory error detector
==708867== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==708867== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==708867== Command: ./main.out --tcount 5
==708867== Parent PID: 703180
==708867== 
==708867== Thread 4:
==708867== Conditional jump or move depends on uninitialised value(s)
==708867==    at 0x127176: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_allocate(unsigned long) (stl_vector.h:346)
==708867==    by 0x1234A7: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_create_storage(unsigned long) (stl_vector.h:361)
==708867==    by 0x11EF65: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_base(unsigned long, std::allocator<unsigned char> const&) (stl_vector.h:305)
==708867==    by 0x11B65A: std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&) (stl_vector.h:555)
==708867==    by 0x1191C6: SO6::SO6(SO6 const&) (SO6.hpp:14)
==708867==    by 0x1341FF: SO6 SO6::left_multiply_by_T<0>() const (SO6.hpp:119)
==708867==    by 0x12DBEC: SO6::left_multiply_by_T(int const&) const (SO6.cpp:294)
==708867==    by 0x1166D4: main._omp_fn.0 (main.cpp:487)
==708867==    by 0x4B06C0D: ??? (in /usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0)
==708867==    by 0x4BE9AC2: start_thread (pthread_create.c:442)
==708867==    by 0x4C7AA03: clone (clone.S:100)
==708867==  Uninitialised value was created by a stack allocation
==708867==    at 0x1152EA: main (main.cpp:434)
==708867== 
==708867== Conditional jump or move depends on uninitialised value(s)
==708867==    at 0x12BFF3: __gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*) (new_allocator.h:111)
==708867==    by 0x129F0A: allocate (allocator.h:185)
==708867==    by 0x129F0A: std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long) (alloc_traits.h:464)
==708867==    by 0x12718A: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_allocate(unsigned long) (stl_vector.h:346)
==708867==    by 0x1234A7: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_create_storage(unsigned long) (stl_vector.h:361)
==708867==    by 0x11EF65: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_base(unsigned long, std::allocator<unsigned char> const&) (stl_vector.h:305)
==708867==    by 0x11B65A: std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&) (stl_vector.h:555)
==708867==    by 0x1191C6: SO6::SO6(SO6 const&) (SO6.hpp:14)
==708867==    by 0x1341FF: SO6 SO6::left_multiply_by_T<0>() const (SO6.hpp:119)
==708867==    by 0x12DBEC: SO6::left_multiply_by_T(int const&) const (SO6.cpp:294)
==708867==    by 0x1166D4: main._omp_fn.0 (main.cpp:487)
==708867==    by 0x4B06C0D: ??? (in /usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0)
==708867==    by 0x4BE9AC2: start_thread (pthread_create.c:442)
==708867==  Uninitialised value was created by a stack allocation
==708867==    at 0x1152EA: main (main.cpp:434)
==708867== 
==708867== Conditional jump or move depends on uninitialised value(s)
==708867==    at 0x4848FC0: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==708867==    by 0x12C005: __gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*) (new_allocator.h:127)
==708867==    by 0x129F0A: allocate (allocator.h:185)
==708867==    by 0x129F0A: std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long) (alloc_traits.h:464)
==708867==    by 0x12718A: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_allocate(unsigned long) (stl_vector.h:346)
==708867==    by 0x1234A7: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_create_storage(unsigned long) (stl_vector.h:361)
==708867==    by 0x11EF65: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_base(unsigned long, std::allocator<unsigned char> const&) (stl_vector.h:305)
==708867==    by 0x11B65A: std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&) (stl_vector.h:555)
==708867==    by 0x1191C6: SO6::SO6(SO6 const&) (SO6.hpp:14)
==708867==    by 0x1341FF: SO6 SO6::left_multiply_by_T<0>() const (SO6.hpp:119)
==708867==    by 0x12DBEC: SO6::left_multiply_by_T(int const&) const (SO6.cpp:294)
==708867==    by 0x1166D4: main._omp_fn.0 (main.cpp:487)
==708867==    by 0x4B06C0D: ??? (in /usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0)
==708867==  Uninitialised value was created by a stack allocation
==708867==    at 0x1152EA: main (main.cpp:434)
==708867== 
**708867** new/new[] failed and should throw an exception, but Valgrind
**708867**    cannot throw exceptions and so is aborting instead.  Sorry.
==708867==    at 0x484852C: ??? (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==708867==    by 0x4849085: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==708867==    by 0x12C005: __gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*) (new_allocator.h:127)
==708867==    by 0x129F0A: allocate (allocator.h:185)
==708867==    by 0x129F0A: std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long) (alloc_traits.h:464)
==708867==    by 0x12718A: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_allocate(unsigned long) (stl_vector.h:346)
==708867==    by 0x1234A7: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_create_storage(unsigned long) (stl_vector.h:361)
==708867==    by 0x11EF65: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_base(unsigned long, std::allocator<unsigned char> const&) (stl_vector.h:305)
==708867==    by 0x11B65A: std::vector<unsigned char, std::allocator<unsigned char> >::vector(std::vector<unsigned char, std::allocator<unsigned char> > const&) (stl_vector.h:555)
==708867==    by 0x1191C6: SO6::SO6(SO6 const&) (SO6.hpp:14)
==708867==    by 0x1341FF: SO6 SO6::left_multiply_by_T<0>() const (SO6.hpp:119)
==708867==    by 0x12DBEC: SO6::left_multiply_by_T(int const&) const (SO6.cpp:294)
==708867==    by 0x1166D4: main._omp_fn.0 (main.cpp:487)
==708867== 
==708867== HEAP SUMMARY:
==708867==     in use at exit: 42,213 bytes in 264 blocks
==708867==   total heap usage: 4,394 allocs, 4,130 frees, 336,434 bytes allocated
==708867== 
==708867== Thread 1:
==708867== 4,415 (1,888 direct, 2,527 indirect) bytes in 4 blocks are definitely lost in loss record 21 of 24
==708867==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==708867==    by 0x12C957: __gnu_cxx::new_allocator<std::_Rb_tree_node<SO6> >::allocate(unsigned long, void const*) (new_allocator.h:127)
==708867==    by 0x12C281: allocate (allocator.h:185)
==708867==    by 0x12C281: std::allocator_traits<std::allocator<std::_Rb_tree_node<SO6> > >::allocate(std::allocator<std::_Rb_tree_node<SO6> >&, unsigned long) (alloc_traits.h:464)
==708867==    by 0x12B7B9: std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_M_get_node() (stl_tree.h:561)
==708867==    by 0x12A642: std::_Rb_tree_node<SO6>* std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_M_create_node<SO6 const&>(SO6 const&) (stl_tree.h:611)
==708867==    by 0x128A81: std::_Rb_tree_node<SO6>* std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_Alloc_node::operator()<SO6 const&>(SO6 const&) const (stl_tree.h:529)
==708867==    by 0x12532D: std::_Rb_tree_iterator<SO6> std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_M_insert_<SO6 const&, std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, SO6 const&, std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_Alloc_node&) (stl_tree.h:1784)
==708867==    by 0x124FFA: std::_Rb_tree_iterator<SO6> std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_M_insert_unique_<SO6 const&, std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_Alloc_node>(std::_Rb_tree_const_iterator<SO6>, SO6 const&, std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_Alloc_node&) (stl_tree.h:2237)
==708867==    by 0x121318: std::enable_if<std::is_same<SO6, std::iterator_traits<std::_Rb_tree_const_iterator<SO6> >::value_type>::value, void>::type std::_Rb_tree<SO6, SO6, std::_Identity<SO6>, std::less<SO6>, std::allocator<SO6> >::_M_insert_range_unique<std::_Rb_tree_const_iterator<SO6> >(std::_Rb_tree_const_iterator<SO6>, std::_Rb_tree_const_iterator<SO6>) (stl_tree.h:1102)
==708867==    by 0x11CA39: void std::set<SO6, std::less<SO6>, std::allocator<SO6> >::insert<std::_Rb_tree_const_iterator<SO6> >(std::_Rb_tree_const_iterator<SO6>, std::_Rb_tree_const_iterator<SO6>) (stl_set.h:567)
==708867==    by 0x116812: main._omp_fn.0 (main.cpp:495)
==708867==    by 0x4B06C0D: ??? (in /usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0)
==708867== 
==708867== 9,120 bytes in 30 blocks are possibly lost in loss record 24 of 24
==708867==    at 0x484DA83: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==708867==    by 0x40147D9: calloc (rtld-malloc.h:44)
==708867==    by 0x40147D9: allocate_dtv (dl-tls.c:375)
==708867==    by 0x40147D9: _dl_allocate_tls (dl-tls.c:634)
==708867==    by 0x4BEA7B4: allocate_stack (allocatestack.c:430)
==708867==    by 0x4BEA7B4: pthread_create@@GLIBC_2.34 (pthread_create.c:647)
==708867==    by 0x4B0725F: ??? (in /usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0)
==708867==    by 0x4AFDA10: GOMP_parallel (in /usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0)
==708867==    by 0x1156FF: main (main.cpp:472)
==708867== 
==708867== LEAK SUMMARY:
==708867==    definitely lost: 1,888 bytes in 4 blocks
==708867==    indirectly lost: 2,527 bytes in 67 blocks
==708867==      possibly lost: 9,120 bytes in 30 blocks
==708867==    still reachable: 28,678 bytes in 163 blocks
==708867==         suppressed: 0 bytes in 0 blocks
==708867== Reachable blocks (those to which a pointer was found) are not shown.
==708867== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==708867== 
==708867== For lists of detected and suppressed errors, rerun with: -s
==708867== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)
